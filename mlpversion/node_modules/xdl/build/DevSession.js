'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startSession = undefined;

// TODO notify www when a project is started, and every N seconds afterwards
let startSession = exports.startSession = (() => {
  var _ref = _asyncToGenerator(function* (projectRoot, exp, forceUpdate = false) {
    if (forceUpdate) {
      keepUpdating = true;
    }

    if (!(_Config || _load_Config()).default.offline && keepUpdating) {
      // TODO(anp) if the user has configured device ids, then notify for those too
      let user = yield (_User || _load_User()).default.getCurrentUserAsync();

      if (!user) {
        // NOTE(brentvatne) let's just bail out in this case for now
        // throw new Error('development sessions can only be initiated for logged in users');
        return;
      }

      try {
        let url = yield (_UrlUtils || _load_UrlUtils()).constructManifestUrlAsync(projectRoot);
        let apiClient = (_ApiV || _load_ApiV()).default.clientForUser(user);
        yield apiClient.postAsync('development-sessions/notify-alive', {
          data: {
            session: {
              description: `${exp.name} on ${_os.default.hostname()}`,
              hostname: _os.default.hostname(),
              config: {
                // TODO: if icons are specified, upload a url for them too so people can distinguish
                description: exp.description,
                name: exp.name,
                slug: exp.slug,
                primaryColor: exp.primaryColor
              },
              url,
              source: 'desktop'
            }
          }
        });
      } catch (e) {
        (_Logger || _load_Logger()).default.global.debug(e, `Error updating dev session: ${e}`);
      }

      setTimeout(function () {
        return startSession(projectRoot, exp);
      }, UPDATE_FREQUENCY_SECS * 1000);
    }
  });

  return function startSession(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

exports.stopSession = stopSession;

var _os = _interopRequireDefault(require('os'));

var _ApiV;

function _load_ApiV() {
  return _ApiV = _interopRequireDefault(require('./ApiV2'));
}

var _Config;

function _load_Config() {
  return _Config = _interopRequireDefault(require('./Config'));
}

var _Logger;

function _load_Logger() {
  return _Logger = _interopRequireDefault(require('./Logger'));
}

var _UrlUtils;

function _load_UrlUtils() {
  return _UrlUtils = _interopRequireWildcard(require('./UrlUtils'));
}

var _User;

function _load_User() {
  return _User = _interopRequireDefault(require('./User'));
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const UPDATE_FREQUENCY_SECS = 20;

let keepUpdating = true;function stopSession() {
  keepUpdating = false;
}
//# sourceMappingURL=__sourcemaps__/DevSession.js.map
