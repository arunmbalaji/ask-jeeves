{"version":3,"sources":["client/IosClient.js"],"names":["async","workspacePath","configuration","type","derivedDataPath","verbose","let","buildCmd","pathToArtifact","projectName","path","join","Error","logger","info","await","spawnAsyncThrowError","stdio","cwd","shell","resolve","_buildAsync","pathToArchive","bundleId","appleTeamIdentifierPrefix","IosPlist","modifyAsync","infoPlist","CFBundleIdentifier","entitlementsFile","fs","existsSync","entitlementsFileContents","readFile","replace","writeFile","_configureExpoClientBundleAsync","buildType","buildConfiguration","clientWorkspacePath","buildPath","relative","artifactDestPath","_buildAndCopyClientArtifactAsync","buildAsync","appleTeamId","warn","configureBundleAsync"],"mappings":"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","file":"../../client/IosClient.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { spawnAsync, spawnAsyncThrowError } from '../detach/ExponentTools';\nimport * as IosPlist from '../detach/IosPlist';\nimport logger from '../detach/Logger';\n\n/**\n *  Build the iOS workspace at the given path.\n *  @return the path to the resulting build artifact\n */\nasync function _buildAsync(\n  workspacePath,\n  configuration,\n  type,\n  derivedDataPath,\n  verbose\n) {\n  let buildCmd, pathToArtifact;\n  const projectName = 'Exponent';\n  if (type === 'simulator') {\n    buildCmd = `xcodebuild -workspace ${projectName}.xcworkspace -scheme ${projectName} -sdk iphonesimulator -configuration ${configuration} -derivedDataPath ${derivedDataPath} CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO ARCHS=\"i386 x86_64\" ONLY_ACTIVE_ARCH=NO | xcpretty`;\n    pathToArtifact = path.join(\n      derivedDataPath,\n      'Build',\n      'Products',\n      `${configuration}-iphonesimulator`,\n      `${projectName}.app`\n    );\n  } else if (type === 'archive') {\n    buildCmd = `xcodebuild -workspace ${projectName}.xcworkspace -scheme ${projectName} -sdk iphoneos -destination generic/platform=iOS -configuration ${configuration} archive -derivedDataPath ${derivedDataPath} -archivePath ${derivedDataPath}/${projectName}.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO | xcpretty`;\n    pathToArtifact = path.join(derivedDataPath, `${projectName}.xcarchive`);\n  } else {\n    throw new Error(`Unsupported build type: ${type}`);\n  }\n\n  logger.info(`Building iOS workspace at ${workspacePath} with derived data path ${derivedDataPath}:\\n`);\n  logger.info(buildCmd);\n  if (!verbose) {\n    logger.info(\n      '\\nxcodebuild is running. Logging errors only. To see full output, use --verbose 1...'\n    );\n  }\n  await spawnAsyncThrowError(buildCmd, null, {\n    // only stderr\n    stdio: verbose ? 'inherit' : ['ignore', 'ignore', 'inherit'],\n    cwd: workspacePath,\n    shell: true,\n  });\n  return path.resolve(workspacePath, pathToArtifact);\n}\n\nasync function _configureExpoClientBundleAsync(pathToArchive, bundleId, appleTeamIdentifierPrefix) {\n  // configure bundle id in Info.plist\n  await IosPlist.modifyAsync(pathToArchive, 'Info', infoPlist => {\n    infoPlist.CFBundleIdentifier = bundleId;\n    return infoPlist;\n  });\n\n  // replace all instances of expo entitlement with custom bundle id entitlement\n  let entitlementsFile = path.join(pathToArchive, 'Exponent.entitlements');\n  if (fs.existsSync(entitlementsFile)) {\n    let entitlementsFileContents = await fs.readFile(entitlementsFile, 'utf8');\n    entitlementsFileContents = entitlementsFileContents.replace(/host\\.exp\\.Exponent/g, bundleId);\n    entitlementsFileContents = entitlementsFileContents.replace(/\\$\\(CFBundleIdentifier\\)/g, bundleId);\n    if (appleTeamIdentifierPrefix) {\n      entitlementsFileContents = entitlementsFileContents.replace(/\\$\\(TeamIdentifierPrefix\\)/g, appleTeamIdentifierPrefix);\n    }\n    await fs.writeFile(entitlementsFile, entitlementsFileContents);\n  }\n}\n\nasync function _buildAndCopyClientArtifactAsync(buildType, buildConfiguration, verbose) {\n  const clientWorkspacePath = path.join('..', 'ios');\n  let buildPath = path.join('..', 'client-builds');\n  let derivedDataPath = path.join(buildPath, 'derived-data', buildType);\n  \n  const pathToArtifact = await _buildAsync(\n    clientWorkspacePath,\n    buildConfiguration,\n    buildType,\n    path.relative(clientWorkspacePath, derivedDataPath),\n    verbose\n  );\n  const artifactDestPath = path.join(buildPath, 'artifacts', buildType, buildConfiguration);\n  logger.info(`\\nFinished building, copying artifact to ${path.resolve(artifactDestPath)}...`);\n  if (fs.existsSync(artifactDestPath)) {\n    await spawnAsyncThrowError('/bin/rm', ['-rf', artifactDestPath]);\n  }\n  logger.info(`mkdir -p ${artifactDestPath}`);\n  await spawnAsyncThrowError('/bin/mkdir', ['-p', artifactDestPath]);\n  logger.info(`cp -R ${pathToArtifact} ${artifactDestPath}`);\n  await spawnAsyncThrowError('/bin/cp', ['-R', pathToArtifact, artifactDestPath]);\n}\n\nasync function buildAsync(buildType, buildConfiguration, verbose) {\n  if (!(buildType === 'simulator' || buildType == 'archive')) {\n    throw new Error(`Unsupported build type: ${buildType}`);\n  }\n  if (!(buildConfiguration === 'debug' || buildConfiguration == 'release')) {\n    throw new Error(`Unsupported build configuration: ${buildConfiguration}`);\n  }\n  return _buildAndCopyClientArtifactAsync(buildType, buildConfiguration, verbose);\n}\n\nasync function configureBundleAsync(pathToArchive, bundleId, appleTeamId) {\n  if (!pathToArchive) {\n    throw new Error('Must specify path to Expo Client archive to configure.');\n  }\n  if (!bundleId) {\n    throw new Error('Must specify a bundle identifier to write.');\n  }\n  if (!appleTeamId) {\n    logger.warn('No apple team id was specified. This may lead to unexpected behavior with the resulting Entitlements.');\n  }\n  return _configureExpoClientBundleAsync(pathToArchive, bundleId, appleTeamId);\n}\n\nexport { buildAsync, configureBundleAsync };\n"],"sourceRoot":"/xdl/src"}