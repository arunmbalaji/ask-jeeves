{"version":3,"sources":["Credentials.js"],"names":["async","metadata","fetchCredentials","credentialsExistForPlatformAsync","getCredentialsForPlatform","username","experienceName","bundleIdentifier","platform","decrypt","err","credentials","await","Api","callMethodAsync","Error","newCredentials","updateCredentialsForPlatform","removeCredentialsForPlatform","validationType","requestId","isValid","error","errorCode","errorMessage","validateCredentialsForPlatform","success","fetchAppleCertificates","ensureAppId","result","fetchPushCertificates"],"mappings":"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","file":"../Credentials.js","sourcesContent":["/**\n * @flow\n */\n\nimport Api from './Api';\nimport XDLError from './XDLError';\n\nexport type AndroidCredentials = {\n  keystore: string,\n  keystoreAlias: string,\n  keystorePassword: string,\n  keyPassword: string,\n};\n\nexport type IOSCredentials = {\n  appleId?: string,\n  password?: string,\n  teamId?: string,\n  certP12?: string,\n  certPassword?: string,\n  pushP12?: string,\n  pushPassword?: string,\n  provisioningProfile?: string,\n  enterpriseAccount?: string,\n  // These are ids on the spaceship object (implementation detail), Spaceship::Portal::Certificate\n  certId?: string,\n  pushId?: string,\n  provisioningProfileId?: string,\n};\n\nexport type Credentials = IOSCredentials | AndroidCredentials;\n\nexport type CredentialMetadata = {\n  username: string,\n  experienceName: string,\n  bundleIdentifier: string,\n  platform: string,\n};\n\nexport async function credentialsExistForPlatformAsync(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  return fetchCredentials(metadata, false);\n}\n\nexport async function getCredentialsForPlatform(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  return fetchCredentials(metadata, true);\n}\n\nasync function fetchCredentials(\n  { username, experienceName, bundleIdentifier, platform }: CredentialMetadata,\n  decrypt: boolean\n): Promise<?Credentials> {\n  // this doesn't hit our mac rpc channel, so it needs significantly less debugging\n  const { err, credentials } = await Api.callMethodAsync('getCredentials', [], 'post', {\n    username,\n    experienceName,\n    bundleIdentifier,\n    platform,\n    decrypt,\n  });\n\n  if (err) {\n    throw new Error('Error fetching credentials.');\n  }\n\n  return credentials;\n}\n\nexport async function updateCredentialsForPlatform(\n  platform: string,\n  newCredentials: Credentials,\n  metadata: CredentialMetadata\n): Promise<void> {\n  // this doesn't go through the mac rpc, no request id needed\n  const { err, credentials } = await Api.callMethodAsync('updateCredentials', [], 'post', {\n    credentials: newCredentials,\n    platform,\n    ...metadata,\n  });\n\n  if (err || !credentials) {\n    throw new Error('Error updating credentials.');\n  }\n\n  return;\n}\n\nexport async function removeCredentialsForPlatform(\n  platform: string,\n  metadata: CredentialMetadata\n): Promise<void> {\n  // doesn't go through mac rpc, no request id needed\n  const { err } = await Api.callMethodAsync('deleteCredentials', [], 'post', {\n    platform,\n    ...metadata,\n  });\n\n  if (err) {\n    throw new Error('Error deleting credentials.');\n  }\n\n  return;\n}\n\nexport async function validateCredentialsForPlatform(\n  platform: string,\n  validationType: string,\n  credentials: ?Credentials,\n  metadata: CredentialMetadata\n): Promise<void> {\n  const { requestId, isValid, error, errorCode, errorMessage } = await Api.callMethodAsync(\n    'validateCredentials',\n    [],\n    'post',\n    {\n      credentials,\n      platform,\n      validationType,\n      ...metadata,\n    }\n  );\n\n  if (!isValid || error) {\n    throw new XDLError(\n      errorCode,\n      `Unable to validate credentials. Request ID ${requestId}, message: ${errorMessage}`\n    );\n  }\n\n  return;\n}\n\nexport async function fetchAppleCertificates(metadata: CredentialMetadata): Promise<void> {\n  const { requestId, err, success, error, errorCode, errorMessage } = await Api.callMethodAsync(\n    'fetchAppleCertificates',\n    [],\n    'post',\n    {\n      ...metadata,\n    }\n  );\n\n  if (err || !success || error) {\n    throw new XDLError(\n      errorCode,\n      `Unable to fetch distribution certificate. Request ID ${requestId}, message: ${errorMessage}`\n    );\n  }\n\n  return success;\n}\n\nexport async function ensureAppId(metadata: CredentialMetadata): Promise<void> {\n  const { requestId, err, success, errorCode, errorMessage } = await Api.callMethodAsync(\n    'ensureAppId',\n    [],\n    'post',\n    {\n      ...metadata,\n    }\n  );\n\n  if (err || !success) {\n    throw new XDLError(\n      errorCode,\n      `Unable to create app id. Request ID ${requestId}, message: ${errorMessage}`\n    );\n  }\n\n  return success;\n}\n\nexport async function fetchPushCertificates(metadata: CredentialMetadata): Promise<void> {\n  const result = await Api.callMethodAsync('fetchPushCertificates', [], 'post', {\n    ...metadata,\n  });\n\n  if (result.err || !result.success) {\n    throw new XDLError(\n      result.errorCode,\n      `Unable to fetch push certificate. Request ID ${result.requestId}, message: ${\n        result.errorMessage\n      }`\n    );\n  }\n\n  return result.success;\n}\n"],"sourceRoot":"/xdl/src"}