{"version":3,"sources":["ApiV2.js"],"names":["let","ROOT_BASE_URL","Config","api","scheme","host","port","API_BASE_URL","ApiV2Error","constructor","message","code","_isApiError","ApiV2Client","static","clientForUser","user","accessToken","idToken","sessionSecret","options","getAsync","async","methodName","args","extraOptions","returnEntireResponse","_requestAsync","httpMethod","queryParameters","json","postAsync","data","body","putAsync","extraRequestOptions","url","reqOptions","method","headers","params","paramsSerializer","QueryString","stringify","_","merge","response","result","await","axios","request","e","maybeErrorData","idx","errors","length","error","Error","responseBody","logger","responseError","serverStack","stack","details"],"mappings":"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","file":"../ApiV2.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\nimport ExtendableError from 'es6-error';\nimport QueryString from 'querystring';\nimport axios from 'axios';\nimport idx from 'idx';\n\nimport Config from './Config';\n\nimport logger from './Logger';\n\nimport type { User } from './User';\n\nlet ROOT_BASE_URL = `${Config.api.scheme}://${Config.api.host}`;\nif (Config.api.port) {\n  ROOT_BASE_URL += ':' + Config.api.port;\n}\nconst API_BASE_URL = ROOT_BASE_URL + '/--/api/v2';\n\nexport class ApiV2Error extends ExtendableError {\n  code: string;\n  details: Object;\n  serverStack: ?string;\n\n  constructor(message: string, code: string = 'UNKNOWN') {\n    super(message);\n    this.code = code;\n    this._isApiError = true;\n  }\n}\n\ntype RequestOptions = {\n  httpMethod: 'get' | 'post' | 'put',\n  queryParameters?: ?QueryParameters,\n  body?: ?Object,\n  json?: boolean,\n};\n\ntype QueryParameters = { [key: string]: ?(string | number | boolean) };\n\ntype ErrorWithResponseBody = Error & {\n  responseBody?: any,\n};\n\ntype APIV2ClientOptions = {\n  idToken?: string,\n  accessToken?: string,\n  sessionSecret?: string,\n};\n\nexport default class ApiV2Client {\n  idToken: ?string = null;\n  accessToken: ?string = null;\n  sessionSecret: ?string = null;\n\n  static clientForUser(user: ?User): ApiV2Client {\n    if (user) {\n      return new ApiV2Client({\n        accessToken: user.accessToken,\n        idToken: user.idToken,\n        sessionSecret: user.sessionSecret,\n      });\n    }\n\n    return new ApiV2Client();\n  }\n\n  constructor(options: APIV2ClientOptions = {}) {\n    if (options.idToken) {\n      this.idToken = options.idToken;\n    }\n\n    if (options.accessToken) {\n      this.accessToken = options.accessToken;\n    }\n\n    if (options.sessionSecret) {\n      this.sessionSecret = options.sessionSecret;\n    }\n  }\n\n  async getAsync(\n    methodName: string,\n    args: QueryParameters = {},\n    extraOptions: Object = {},\n    returnEntireResponse: boolean = false\n  ): Promise<*> {\n    return this._requestAsync(\n      methodName,\n      {\n        httpMethod: 'get',\n        queryParameters: args,\n        json: true,\n      },\n      extraOptions,\n      returnEntireResponse\n    );\n  }\n\n  async postAsync(\n    methodName: string,\n    data: Object = {},\n    extraOptions: Object = {},\n    returnEntireResponse: boolean = false\n  ): Promise<*> {\n    return this._requestAsync(\n      methodName,\n      {\n        httpMethod: 'post',\n        body: data,\n      },\n      extraOptions,\n      returnEntireResponse\n    );\n  }\n\n  async putAsync(\n    methodName: string,\n    data: Object = {},\n    extraOptions: Object = {},\n    returnEntireResponse: boolean = false\n  ): Promise<*> {\n    return this._requestAsync(\n      methodName,\n      {\n        httpMethod: 'put',\n        body: data,\n      },\n      extraOptions,\n      returnEntireResponse\n    );\n  }\n\n  async _requestAsync(\n    methodName: string,\n    options: RequestOptions,\n    extraRequestOptions: Object,\n    returnEntireResponse: boolean = false\n  ): Promise<*> {\n    const url = `${API_BASE_URL}/${methodName}`;\n    let reqOptions: Object = {\n      url,\n      method: options.httpMethod,\n      headers: {\n        'Exponent-Client': 'xdl',\n      },\n      json: typeof options.json !== 'undefined' ? options.json : false,\n    };\n\n    if (this.idToken) {\n      reqOptions.headers['Authorization'] = `Bearer ${this.idToken}`;\n    }\n\n    if (this.accessToken) {\n      reqOptions.headers['Exp-Access-Token'] = this.accessToken;\n    }\n\n    if (this.sessionSecret) {\n      reqOptions.headers['Expo-Session'] = this.sessionSecret;\n    }\n\n    // Handle qs\n    if (options.queryParameters) {\n      reqOptions.params = options.queryParameters;\n      reqOptions.paramsSerializer = QueryString.stringify;\n    }\n\n    // Handle body\n    if (options.body) {\n      reqOptions.data = options.body;\n    }\n\n    reqOptions = _.merge({}, reqOptions, extraRequestOptions);\n    let response;\n    let result;\n    try {\n      response = await axios.request(reqOptions);\n      result = response.data;\n    } catch (e) {\n      // axios errors on 400's, pass this case to better error handling downstream\n      const maybeErrorData = idx(e, _ => _.response.data.errors.length);\n      if (maybeErrorData) {\n        result = e.response.data;\n      } else if (e.code === 'ECONNREFUSED' || e.code === 'ENOTFOUND' || e.code === 'ETIMEDOUT') {\n        // surface network failures\n        throw e;\n      } else {\n        const error: ErrorWithResponseBody = new Error(\n          `There was a problem understanding the server. Please try again.`\n        );\n        error.responseBody = result;\n        logger.error(error);\n        throw error;\n      }\n    }\n\n    if (!result || typeof result !== 'object') {\n      let error: ErrorWithResponseBody = new Error(`There was a problem understanding the server.`);\n      error.responseBody = result;\n      throw error;\n    }\n\n    if (result.errors && result.errors.length) {\n      let responseError = result.errors[0];\n      let error = new ApiV2Error(responseError.message, responseError.code);\n      error.serverStack = responseError.stack;\n      error.details = responseError.details;\n      throw error;\n    }\n\n    return returnEntireResponse ? response : result.data;\n  }\n}\n"],"sourceRoot":"/xdl/src"}