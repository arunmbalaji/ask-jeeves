{"version":3,"sources":["detach/Logger.js"],"names":["withFields","pipeOutputToLogger","PRINT_JSON_LOGS","process","env","JSON_LOGS","LOGGER_NAME","logger","bunyan","createLogger","name","console","extraFields","levels","reduce","obj","level","args","stdout","stderr","stdoutOnly","on","line","logMultiline","source","data","lines","String","split","forEach","unshift","info"],"mappings":";;;;;;;;QAYgBA,U,GAAAA,U;QAWAC,kB,GAAAA,kB;;;;AAvBhB;AAAA;AAAA;;;;AAEA,MAAMC,kBAAkBC,QAAQC,GAARD,CAAYE,SAAZF,KAA0B,GAAlD;AACA,MAAMG,cAAc,YAApB;;AAEA,MAAMC,SAASL,kBAAkBM,oCAAOC,YAAPD,CAAoB,EAAEE,MAAMJ,WAAR,EAApBE,CAAlBN,GAA+DS,OAA9E;AACAJ,OAAOP,UAAPO,GAAoBK,eAAeZ,WAAWO,MAAXP,EAAmBY,WAAnBZ,CAAnCO;;kBAEeA,M;;;AAEf,MAAMM,SAAS,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,EAA2B,MAA3B,EAAmC,OAAnC,EAA4C,OAA5C,CAAf;;AAEO,SAASb,UAAT,CAAoBO,MAApB,EAA4BK,WAA5B,EAAyC;AAC9C,MAAI,CAACV,eAAL,EAAsB;AACpB,WAAOS,OAAP;AACF;;AAEA,SAAOE,OAAOC,MAAPD,CAAc,CAACE,GAAD,EAAMC,KAAN,KAAgB;AACnCD,QAAIC,KAAJD,IAAa,CAAC,GAAGE,IAAJ,KAAaV,OAAOS,KAAPT,EAAcK,WAAdL,EAA2B,GAAGU,IAA9BV,CAA1BQ;AACA,WAAOA,GAAP;AACD,GAHMF,EAGJ,EAHIA,CAAP;AAIF;;AAEO,SAASZ,kBAAT,CAA4B,EAAEiB,MAAF,EAAUC,MAAV,KAAqB,EAAjD,EAAqDP,cAAc,EAAnE,EAAuEQ,aAAa,KAApF,EAA2F;AAChG,MAAIF,MAAJ,EAAY;AACVA,WAAOG,EAAPH,CAAU,MAAVA,EAAkBI,QAAQC,aAAaD,IAAbC,eAAwBX,WAAxBW,IAAqCC,QAAQ,QAA7CD,IAA1BL;AACF;AACA,MAAIC,MAAJ,EAAY;AACV,UAAMK,SAASJ,aAAa,QAAbA,GAAwB,QAAvC;AACAD,WAAOE,EAAPF,CAAU,MAAVA,EAAkBG,QAAQC,aAAaD,IAAbC,eAAwBX,WAAxBW,IAAqCC,MAArCD,IAA1BJ;AACF;AACF;;AAEA,SAASI,YAAT,CAAsBE,IAAtB,EAA4Bb,WAA5B,EAAyC;AACvC,MAAI,CAACa,IAAL,EAAW;AACT;AACF;AACA,QAAMC,QAAQC,OAAOF,IAAPE,EAAaC,KAAbD,CAAmB,IAAnBA,CAAd;AACAD,QAAMG,OAANH,CAAcJ,QAAQ;AACpB,QAAIA,IAAJ,EAAU;AACR,YAAML,OAAO,CAACK,IAAD,CAAb;AACA,UAAIpB,eAAJ,EAAqB;AACnBe,aAAKa,OAALb,CAAaL,WAAbK;AACF;AACAV,aAAOwB,IAAPxB,CAAY,GAAGU,IAAfV;AACF;AACD,GARDmB;AASF","file":"../../detach/Logger.js","sourcesContent":["import bunyan from '@expo/bunyan';\n\nconst PRINT_JSON_LOGS = process.env.JSON_LOGS === '1';\nconst LOGGER_NAME = 'xdl-detach';\n\nconst logger = PRINT_JSON_LOGS ? bunyan.createLogger({ name: LOGGER_NAME }) : console;\nlogger.withFields = extraFields => withFields(logger, extraFields);\n\nexport default logger;\n\nconst levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\n\nexport function withFields(logger, extraFields) {\n  if (!PRINT_JSON_LOGS) {\n    return console;\n  }\n\n  return levels.reduce((obj, level) => {\n    obj[level] = (...args) => logger[level](extraFields, ...args);\n    return obj;\n  }, {});\n}\n\nexport function pipeOutputToLogger({ stdout, stderr } = {}, extraFields = {}, stdoutOnly = false) {\n  if (stdout) {\n    stdout.on('data', line => logMultiline(line, { ...extraFields, source: 'stdout' }));\n  }\n  if (stderr) {\n    const source = stdoutOnly ? 'stdout' : 'stderr';\n    stderr.on('data', line => logMultiline(line, { ...extraFields, source }));\n  }\n}\n\nfunction logMultiline(data, extraFields) {\n  if (!data) {\n    return;\n  }\n  const lines = String(data).split('\\n');\n  lines.forEach(line => {\n    if (line) {\n      const args = [line];\n      if (PRINT_JSON_LOGS) {\n        args.unshift(extraFields);\n      }\n      logger.info(...args);\n    }\n  });\n}\n"],"sourceRoot":"/xdl/src"}