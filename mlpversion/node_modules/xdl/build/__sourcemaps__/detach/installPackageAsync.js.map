{"version":3,"sources":["detach/installPackageAsync.js"],"names":["async","appPath","packageName","packageVersion","options","useYarn","await","fs","pathExists","path","join","let","command","args","pkg","push","npmOrYarn","logger","info","spawnOpts","silent","stdio","spawnAsync","installPackageAsync"],"mappings":";;;;;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AACA;;;;AAEA;AAAA;AAAA;;;;;;;+BAQeA,WACbC,OADaD,EAEbE,WAFaF,EAGbG,cAHaH,EAIbI,UAAgB,EAJHJ,EAKW;AACxB,UAAMK,UAAmBC,MAAMC,sCAAGC,UAAHD,CAAcE,cAAKC,IAALD,CAAUR,OAAVQ,EAAmB,WAAnBA,CAAdF,CAA/B;;AAEAI,QAAIC,UAAU,EAAdD;AACAA,QAAIE,OAAO,EAAXF;;AAEA,QAAIN,OAAJ,EAAa;AACXO,gBAAU,SAAVA;AACA,UAAIV,WAAJ,EAAiB;AACfW,eAAO,CAAC,KAAD,CAAPA;AACF;AACF,KALA,MAKO;AACLD,gBAAU,KAAVA;AACAC,aAAO,CAAC,SAAD,EAAY,QAAZ,CAAPA;AACF;;AAEAF,QAAIG,MAAMZ,WAAVS;AACA,QAAIG,GAAJ,EAAS;AACP,UAAIX,cAAJ,EAAoB;AAClBW,cAAO,GAAEA,GAAI,IAAGX,cAAe,EAA/BW;AACF;;AAEAD,WAAKE,IAALF,CAAUC,GAAVD;AACF;;AAEA,UAAMG,YAAYX,UAAU,MAAVA,GAAmB,KAArC;AACAY,wCAAOC,IAAPD,CAAa,cAAaH,MAAMA,GAANA,GAAY,cAAe,UAASE,SAAU,KAAxEC;AACAA,wCAAOC,IAAPD;;AAEAN,QAAIQ,YAAY,EAAhBR;AACA,QAAIP,QAAQgB,MAAZ,EAAoB;AAClBD,gBAAUC,MAAVD,GAAmB,IAAnBA;AACF,KAFA,MAEO;AACLA,gBAAUE,KAAVF,GAAkB,SAAlBA;AACF;;AAEA,WAAOG,iDAAWV,OAAXU,EAAoBT,IAApBS,EAA0BH,SAA1BG,CAAP;AACF,G;;WA1C8BC,mB;;;;SAAAA,mB","file":"../../detach/installPackageAsync.js","sourcesContent":["// @flow\n\nimport spawnAsync from '@expo/spawn-async';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport logger from './Logger';\n\ntype InstallResult = {\n  code: number,\n  command: string,\n  args: Array<string>,\n};\n\nexport default async function installPackageAsync(\n  appPath: string,\n  packageName?: string,\n  packageVersion?: string,\n  options?: any = {}\n): Promise<InstallResult> {\n  const useYarn: boolean = await fs.pathExists(path.join(appPath, 'yarn.lock'));\n\n  let command = '';\n  let args = [];\n\n  if (useYarn) {\n    command = 'yarnpkg';\n    if (packageName) {\n      args = ['add'];\n    }\n  } else {\n    command = 'npm';\n    args = ['install', '--save'];\n  }\n\n  let pkg = packageName;\n  if (pkg) {\n    if (packageVersion) {\n      pkg = `${pkg}@${packageVersion}`;\n    }\n\n    args.push(pkg);\n  }\n\n  const npmOrYarn = useYarn ? 'yarn' : 'npm';\n  logger.info(`Installing ${pkg ? pkg : 'dependencies'} using ${npmOrYarn}...`);\n  logger.info();\n\n  let spawnOpts = {};\n  if (options.silent) {\n    spawnOpts.silent = true;\n  } else {\n    spawnOpts.stdio = 'inherit';\n  }\n\n  return spawnAsync(command, args, spawnOpts);\n}\n"],"sourceRoot":"/xdl/src"}