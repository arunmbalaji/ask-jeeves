{"version":3,"sources":["detach/IosShellApp.js"],"names":["async","projectName","workspacePath","configuration","type","relativeBuildDestination","verbose","let","buildCmd","pathToArtifact","buildDest","path","join","Error","logger","info","await","spawnAsyncThrowError","stdio","cwd","shell","resolve","_buildAsync","isRepoUpdateEnabled","pathsToClean","forEach","fs","existsSync","rimraf","sync","cocoapodsArgs","push","_podInstallAsync","args","expoSourcePath","workspaceSourcePath","privateConfigFile","privateConfig","privateConfigContents","readFile","JSON","parse","manifest","action","url","sdkVersion","releaseChannel","getManifestAsync","buildFlags","StandaloneBuildFlags","createIos","appleTeamId","context","StandaloneContext","createServiceContext","archivePath","testEnvironment","_createStandaloneContextAsync","output","IosNSBundle","configureAsync","archiveName","config","slug","replace","appReleasePath","data","spawnAsync","stdoutOnly","pipeToLogger","loggerFields","buildPhase","_configureAndCopyShellAppArchiveAsync","skipRepoUpdate","build","ios","_","IosWorkspace","createDetachedAsync","_createShellAppWorkspaceAsync","reuseWorkspace","getPaths","relative","artifactDestPath","_buildAndCopyShellAppArtifactAsync","_validateCLIArgs","createIOSShellAppAsync"],"mappings":"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","file":"../../detach/IosShellApp.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport fs from 'fs-extra';\nimport path from 'path';\nimport rimraf from 'rimraf';\n\nimport { getManifestAsync, spawnAsync, spawnAsyncThrowError } from './ExponentTools';\nimport * as IosNSBundle from './IosNSBundle';\nimport * as IosWorkspace from './IosWorkspace';\nimport StandaloneBuildFlags from './StandaloneBuildFlags';\nimport StandaloneContext from './StandaloneContext';\nimport logger from './Logger';\n\nfunction _validateCLIArgs(args) {\n  args.type = args.type || 'archive';\n  args.configuration = args.configuration || 'Release';\n  args.verbose = args.verbose || false;\n  args.testEnvironment = args.testEnvironment || 'none';\n\n  switch (args.type) {\n    case 'simulator': {\n      if (args.configuration !== 'Debug' && args.configuration !== 'Release') {\n        throw new Error(`Unsupported build configuration ${args.configuration}`);\n      }\n      break;\n    }\n    case 'archive': {\n      if (args.configuration !== 'Release') {\n        throw new Error('Release is the only supported configuration when archiving');\n      }\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported build type ${args.type}`);\n    }\n  }\n\n  switch (args.action) {\n    case 'configure': {\n      if (!args.url) {\n        throw new Error('Must run with `--url MANIFEST_URL`');\n      }\n      if (!args.sdkVersion) {\n        throw new Error('Must run with `--sdkVersion SDK_VERSION`');\n      }\n      if (!args.archivePath) {\n        throw new Error(\n          'Need to provide --archivePath <path to existing archive for configuration>'\n        );\n      }\n      if (\n        args.testEnvironment !== 'local' &&\n        args.testEnvironment !== 'ci' &&\n        args.testEnvironment !== 'none'\n      ) {\n        throw new Error(`Unsupported test environment ${args.testEnvironment}`);\n      }\n      break;\n    }\n    case 'build': {\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported build action ${args.action}`);\n    }\n  }\n\n  return args;\n}\n\n/**\n *  Build the iOS workspace at the given path.\n *  @return the path to the resulting build artifact\n */\nasync function _buildAsync(\n  projectName,\n  workspacePath,\n  configuration,\n  type,\n  relativeBuildDestination,\n  verbose\n) {\n  let buildCmd, pathToArtifact;\n  const buildDest = `${relativeBuildDestination}-${type}`;\n  if (type === 'simulator') {\n    buildCmd = `xcodebuild -workspace ${projectName}.xcworkspace -scheme ${projectName} -sdk iphonesimulator -configuration ${configuration} -derivedDataPath ${buildDest} CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO ARCHS=\"i386 x86_64\" ONLY_ACTIVE_ARCH=NO | xcpretty`;\n    pathToArtifact = path.join(\n      buildDest,\n      'Build',\n      'Products',\n      `${configuration}-iphonesimulator`,\n      `${projectName}.app`\n    );\n  } else if (type === 'archive') {\n    buildCmd = `xcodebuild -workspace ${projectName}.xcworkspace -scheme ${projectName} -sdk iphoneos -destination generic/platform=iOS -configuration ${configuration} archive -derivedDataPath ${buildDest} -archivePath ${buildDest}/${projectName}.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO | xcpretty`;\n    pathToArtifact = path.join(buildDest, `${projectName}.xcarchive`);\n  } else {\n    throw new Error(`Unsupported build type: ${type}`);\n  }\n\n  logger.info(`Building iOS workspace at ${workspacePath} to ${buildDest}:\\n`);\n  logger.info(buildCmd);\n  if (!verbose) {\n    logger.info(\n      '\\nxcodebuild is running. Logging errors only. To see full output, use --verbose 1...'\n    );\n  }\n  await spawnAsyncThrowError(buildCmd, null, {\n    // only stderr\n    stdio: verbose ? 'inherit' : ['ignore', 'ignore', 'inherit'],\n    cwd: workspacePath,\n    shell: true,\n  });\n  return path.resolve(workspacePath, pathToArtifact);\n}\n\nasync function _podInstallAsync(workspacePath, isRepoUpdateEnabled) {\n  // ensure pods are clean\n  const pathsToClean = [path.join(workspacePath, 'Pods'), path.join(workspacePath, 'Podfile.lock')];\n  pathsToClean.forEach(path => {\n    if (fs.existsSync(path)) {\n      rimraf.sync(path);\n    }\n  });\n\n  // install\n  let cocoapodsArgs = ['install'];\n  if (isRepoUpdateEnabled) {\n    cocoapodsArgs.push('--repo-update');\n  }\n  logger.info('Installing iOS workspace dependencies...');\n  logger.info(`pod ${cocoapodsArgs.join(' ')}`);\n  await spawnAsyncThrowError('pod', cocoapodsArgs, {\n    stdio: 'inherit',\n    cwd: workspacePath,\n  });\n}\n\nasync function _createStandaloneContextAsync(args) {\n  // right now we only ever build a single detached workspace for service contexts.\n  // TODO: support multiple different pod configurations, assemble a cache of those builds.\n  const expoSourcePath = '../ios';\n  const workspaceSourcePath = path.join(\n    expoSourcePath,\n    '..',\n    'shellAppWorkspaces',\n    'ios',\n    'default'\n  );\n  let { privateConfigFile } = args;\n\n  let privateConfig;\n  if (privateConfigFile) {\n    let privateConfigContents = await fs.readFile(privateConfigFile, 'utf8');\n    privateConfig = JSON.parse(privateConfigContents);\n  }\n\n  let manifest;\n  if (args.action === 'configure') {\n    const { url, sdkVersion, releaseChannel } = args;\n    manifest = await getManifestAsync(url, {\n      'Exponent-SDK-Version': sdkVersion,\n      'Exponent-Platform': 'ios',\n      'Expo-Release-Channel': releaseChannel ? releaseChannel : 'default',\n    });\n  }\n\n  const buildFlags = StandaloneBuildFlags.createIos(args.configuration, {\n    workspaceSourcePath,\n    appleTeamId: args.appleTeamId,\n  });\n  const context = StandaloneContext.createServiceContext(\n    expoSourcePath,\n    args.archivePath,\n    manifest,\n    privateConfig,\n    args.testEnvironment,\n    buildFlags,\n    args.url,\n    args.releaseChannel\n  );\n  return context;\n}\n\n/**\n * possible args:\n *  @param url manifest url for shell experience\n *  @param sdkVersion sdk to use when requesting the manifest\n *  @param releaseChannel channel to pull manifests from, default is 'default'\n *  @param archivePath path to existing NSBundle to configure\n *  @param privateConfigFile path to a private config file containing, e.g., private api keys\n *  @param appleTeamId Apple Developer's account Team ID\n *  @param output specify the output path of the configured archive (ie) /tmp/my-app-archive-build.xcarchive or /tmp/my-app-ios-build.tar.gz\n */\nasync function _configureAndCopyShellAppArchiveAsync(args) {\n  const { output, type } = args;\n  const context = await _createStandaloneContextAsync(args);\n  await IosNSBundle.configureAsync(context);\n  if (output) {\n    // TODO: un-hard-code ExpoKitApp.app\n    const archiveName = context.config.slug.replace(/[^0-9a-z_\\-]/gi, '_');\n    const appReleasePath = path.resolve(context.data.archivePath, '..');\n    if (type === 'simulator') {\n      await spawnAsync(\n        `mv ExpoKitApp.app ${archiveName}.app && tar -czvf ${output} ${archiveName}.app`,\n        null,\n        {\n          stdoutOnly: true,\n          pipeToLogger: true,\n          loggerFields: { buildPhase: 'creating an archive for simulator' },\n          cwd: appReleasePath,\n          shell: true,\n        }\n      );\n    } else if (type === 'archive') {\n      await spawnAsync('/bin/mv', [`ExpoKitApp.xcarchive`, output], {\n        pipeToLogger: true,\n        cwd: `${context.data.archivePath}/../../../..`,\n        loggerFields: { buildPhase: 'renaming archive' },\n      });\n    }\n  }\n}\n\nasync function _createShellAppWorkspaceAsync(context, skipRepoUpdate) {\n  if (fs.existsSync(context.build.ios.workspaceSourcePath)) {\n    logger.info(`Removing existing workspace at ${context.build.ios.workspaceSourcePath}...`);\n    try {\n      rimraf.sync(context.build.ios.workspaceSourcePath);\n    } catch (_) {}\n  }\n  await IosWorkspace.createDetachedAsync(context);\n  await _podInstallAsync(context.build.ios.workspaceSourcePath, !skipRepoUpdate);\n}\n\n/**\n * possible args:\n *  @param configuration StandaloneBuildConfiguration (Debug or Release)\n *  @param verbose show all xcodebuild output (default false)\n *  @param reuseWorkspace if true, when building, assume a detached workspace already exists rather than creating a new one.\n *  @param skipRepoUpdate if true, when building, omit `--repo-update` cocoapods flag.\n */\nasync function _buildAndCopyShellAppArtifactAsync(args) {\n  const context = await _createStandaloneContextAsync(args);\n  const { verbose, type, reuseWorkspace } = args;\n  const { projectName } = IosWorkspace.getPaths(context);\n\n  if (!reuseWorkspace) {\n    await _createShellAppWorkspaceAsync(context, args.skipRepoUpdate);\n  }\n  const pathToArtifact = await _buildAsync(\n    projectName,\n    context.build.ios.workspaceSourcePath,\n    context.build.configuration,\n    type,\n    path.relative(context.build.ios.workspaceSourcePath, '../shellAppBase'),\n    verbose\n  );\n  const artifactDestPath = path.join('../shellAppBase-builds', type, context.build.configuration);\n  logger.info(`\\nFinished building, copying artifact to ${path.resolve(artifactDestPath)}...`);\n  if (fs.existsSync(artifactDestPath)) {\n    await spawnAsyncThrowError('/bin/rm', ['-rf', artifactDestPath]);\n  }\n  logger.info(`mkdir -p ${artifactDestPath}`);\n  await spawnAsyncThrowError('/bin/mkdir', ['-p', artifactDestPath]);\n  logger.info(`cp -R ${pathToArtifact} ${artifactDestPath}`);\n  await spawnAsyncThrowError('/bin/cp', ['-R', pathToArtifact, artifactDestPath]);\n}\n\n/**\n *  possible args in addition to action-specific args:\n *  @param action\n *    build - build a binary\n *    configure - don't build anything, just configure the files in an existing NSBundle\n *  @param type type of artifact to build or configure (simulator or archive)\n */\nasync function createIOSShellAppAsync(args) {\n  args = _validateCLIArgs(args);\n  if (args.action === 'build') {\n    await _buildAndCopyShellAppArtifactAsync(args);\n  } else if (args.action === 'configure') {\n    await _configureAndCopyShellAppArchiveAsync(args);\n  }\n}\n\nexport { createIOSShellAppAsync };\n"],"sourceRoot":"/xdl/src"}