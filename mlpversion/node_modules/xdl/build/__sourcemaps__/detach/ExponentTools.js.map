{"version":3,"sources":["detach/ExponentTools.js"],"names":["async","url","headers","buildPhaseLogger","logger","withFields","buildPhase","requestOptions","replace","response","await","request","responseBody","body","info","let","manifest","JSON","parse","e","Error","getManifestAsync","args","length","spawnAsyncQuiet","stdio","cwd","process","options","pipeToLogger","promise","child","pipeOutputToLogger","loggerFields","stdoutOnly","spawnAsyncThrowError","error","message","spawnAsync","filename","transform","fileString","fs","readFile","newFileString","writeFile","transformFileContentsAsync","inMemoryManifest","locales","undefined","lang","path","Object","entries","s","ErrorCode","INVALID_JSON","stringify","getResolvedLocalesAsync","Request","defaults","resolveWithFullResponse","_getFilesizeInBytes","stats","statSync","fileSizeInBytes","parseSdkMajorVersion","expSdkVersion","sdkMajorVersion","versionComponents","split","map","number","parseInt","_","saveUrlToPathAsync","Promise","resolve","reject","stream","createWriteStream","on","pipe","saveImageToPathAsync","projectRoot","pathOrURL","outPath","localPath","existsSync","createReadStream","manifestUsesSplashApi","platform","splash","ios","android","rimrafDontThrow","directory","rimraf","sync","warn","isDirectory","dir"],"mappings":"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","file":"../../detach/ExponentTools.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport fs from 'fs-extra';\nimport path from 'path';\nimport Request from 'request-promise-native';\nimport rimraf from 'rimraf';\nimport spawnAsyncQuiet from '@expo/spawn-async';\n\nimport logger, { pipeOutputToLogger } from './Logger';\nimport XDLError from '../XDLError';\nimport ErrorCode from '../ErrorCode';\n\nconst request = Request.defaults({\n  resolveWithFullResponse: true,\n});\n\nfunction _getFilesizeInBytes(path) {\n  let stats = fs.statSync(path);\n  let fileSizeInBytes = stats['size'];\n  return fileSizeInBytes;\n}\n\nfunction parseSdkMajorVersion(expSdkVersion) {\n  let sdkMajorVersion = 0;\n  try {\n    let versionComponents = expSdkVersion.split('.').map(number => parseInt(number, 10));\n    sdkMajorVersion = versionComponents[0];\n  } catch (_) {}\n  return sdkMajorVersion;\n}\n\nfunction saveUrlToPathAsync(url, path) {\n  return new Promise(function(resolve, reject) {\n    let stream = fs.createWriteStream(path);\n    stream.on('close', () => {\n      if (_getFilesizeInBytes(path) < 10) {\n        throw new Error(`{filename} is too small`);\n      }\n      resolve();\n    });\n    stream.on('error', reject);\n    request(url).pipe(stream);\n  });\n}\n\nfunction saveImageToPathAsync(projectRoot, pathOrURL, outPath) {\n  const localPath = path.resolve(projectRoot, pathOrURL);\n  return new Promise(function(resolve, reject) {\n    let stream = fs.createWriteStream(outPath);\n    stream.on('close', () => {\n      if (_getFilesizeInBytes(outPath) < 10) {\n        throw new Error(`{filename} is too small`);\n      }\n      resolve();\n    });\n    stream.on('error', reject);\n    if (fs.existsSync(localPath)) {\n      fs.createReadStream(localPath).pipe(stream);\n    } else {\n      request(pathOrURL).pipe(stream);\n    }\n  });\n}\n\nasync function getManifestAsync(url, headers) {\n  const buildPhaseLogger = logger.withFields({ buildPhase: 'reading manifest' });\n  const requestOptions = {\n    url: url.replace('exp://', 'http://') + '/index.exp',\n    headers,\n  };\n\n  const response = await request(requestOptions);\n  const responseBody = response.body;\n  buildPhaseLogger.info('Using manifest:', responseBody);\n  let manifest;\n  try {\n    manifest = JSON.parse(responseBody);\n  } catch (e) {\n    throw new Error(`Unable to parse manifest: ${e}`);\n  }\n\n  return manifest;\n}\n\nasync function spawnAsyncThrowError(...args) {\n  if (args.length === 2) {\n    return spawnAsyncQuiet(args[0], args[1], {\n      stdio: 'inherit',\n      cwd: process.cwd(),\n    });\n  } else {\n    const options = args[2];\n    if (options.pipeToLogger) {\n      options.stdio = 'pipe';\n      options.cwd = options.cwd || process.cwd();\n    }\n    const promise = spawnAsyncQuiet(...args);\n    if (options.pipeToLogger && promise.child) {\n      pipeOutputToLogger(promise.child, options.loggerFields, options.stdoutOnly);\n    }\n    return promise;\n  }\n}\n\nasync function spawnAsync(...args) {\n  try {\n    return await spawnAsyncThrowError(...args);\n  } catch (e) {\n    logger.error(e.message);\n  }\n}\n\nasync function transformFileContentsAsync(filename, transform) {\n  let fileString = await fs.readFile(filename, 'utf8');\n  let newFileString = transform(fileString);\n  if (newFileString !== null) {\n    await fs.writeFile(filename, newFileString);\n  }\n}\n\nfunction manifestUsesSplashApi(manifest, platform) {\n  if (platform === 'ios') {\n    return manifest.splash || (manifest.ios && manifest.ios.splash);\n  }\n  if (platform === 'android') {\n    return manifest.splash || (manifest.android && manifest.android.splash);\n  }\n  return false;\n}\n\nfunction rimrafDontThrow(directory) {\n  try {\n    rimraf.sync(directory);\n  } catch (e) {\n    logger.warn(\n      `There was an issue cleaning up, but your project should still work. You may need to manually remove ${directory}. (${e})`\n    );\n  }\n}\n\nfunction isDirectory(dir) {\n  try {\n    if (fs.statSync(dir).isDirectory()) {\n      return true;\n    }\n\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nasync function getResolvedLocalesAsync(inMemoryManifest) {\n  const locales = {};\n  if (inMemoryManifest.locales !== undefined) {\n    for (const [lang, path] of Object.entries(inMemoryManifest.locales)) {\n      const s = await fs.readFile(path, 'utf8');\n      try {\n        locales[lang] = JSON.parse(s);\n      } catch (e) {\n        throw new XDLError(ErrorCode.INVALID_JSON, JSON.stringify(e));\n      }\n    }\n  }\n  return locales;\n}\n\nexport {\n  isDirectory,\n  parseSdkMajorVersion,\n  saveUrlToPathAsync,\n  saveImageToPathAsync,\n  getManifestAsync,\n  rimrafDontThrow,\n  spawnAsyncThrowError,\n  spawnAsync,\n  transformFileContentsAsync,\n  manifestUsesSplashApi,\n  getResolvedLocalesAsync,\n};\n"],"sourceRoot":"/xdl/src"}