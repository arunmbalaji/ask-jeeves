'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _spawnAsync;

function _load_spawnAsync() {
  return _spawnAsync = _interopRequireDefault(require('@expo/spawn-async'));
}

var _fsExtra;

function _load_fsExtra() {
  return _fsExtra = _interopRequireDefault(require('fs-extra'));
}

var _path = _interopRequireDefault(require('path'));

var _Logger;

function _load_Logger() {
  return _Logger = _interopRequireDefault(require('./Logger'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = (() => {
  var _ref = _asyncToGenerator(function* (appPath, packageName, packageVersion, options = {}) {
    const useYarn = yield (_fsExtra || _load_fsExtra()).default.pathExists(_path.default.join(appPath, 'yarn.lock'));

    let command = '';
    let args = [];

    if (useYarn) {
      command = 'yarnpkg';
      if (packageName) {
        args = ['add'];
      }
    } else {
      command = 'npm';
      args = ['install', '--save'];
    }

    let pkg = packageName;
    if (pkg) {
      if (packageVersion) {
        pkg = `${pkg}@${packageVersion}`;
      }

      args.push(pkg);
    }

    const npmOrYarn = useYarn ? 'yarn' : 'npm';
    (_Logger || _load_Logger()).default.info(`Installing ${pkg ? pkg : 'dependencies'} using ${npmOrYarn}...`);
    (_Logger || _load_Logger()).default.info();

    let spawnOpts = {};
    if (options.silent) {
      spawnOpts.silent = true;
    } else {
      spawnOpts.stdio = 'inherit';
    }

    return (0, (_spawnAsync || _load_spawnAsync()).default)(command, args, spawnOpts);
  });

  function installPackageAsync(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  }

  return installPackageAsync;
})();
//# sourceMappingURL=../__sourcemaps__/detach/installPackageAsync.js.map
