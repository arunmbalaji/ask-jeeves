'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.withFields = withFields;
exports.pipeOutputToLogger = pipeOutputToLogger;

var _bunyan;

function _load_bunyan() {
  return _bunyan = _interopRequireDefault(require('@expo/bunyan'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PRINT_JSON_LOGS = process.env.JSON_LOGS === '1';
const LOGGER_NAME = 'xdl-detach';

const logger = PRINT_JSON_LOGS ? (_bunyan || _load_bunyan()).default.createLogger({ name: LOGGER_NAME }) : console;
logger.withFields = extraFields => withFields(logger, extraFields);

exports.default = logger;


const levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];

function withFields(logger, extraFields) {
  if (!PRINT_JSON_LOGS) {
    return console;
  }

  return levels.reduce((obj, level) => {
    obj[level] = (...args) => logger[level](extraFields, ...args);
    return obj;
  }, {});
}

function pipeOutputToLogger({ stdout, stderr } = {}, extraFields = {}, stdoutOnly = false) {
  if (stdout) {
    stdout.on('data', line => logMultiline(line, _extends({}, extraFields, { source: 'stdout' })));
  }
  if (stderr) {
    const source = stdoutOnly ? 'stdout' : 'stderr';
    stderr.on('data', line => logMultiline(line, _extends({}, extraFields, { source })));
  }
}

function logMultiline(data, extraFields) {
  if (!data) {
    return;
  }
  const lines = String(data).split('\n');
  lines.forEach(line => {
    if (line) {
      const args = [line];
      if (PRINT_JSON_LOGS) {
        args.unshift(extraFields);
      }
      logger.info(...args);
    }
  });
}
//# sourceMappingURL=../__sourcemaps__/detach/Logger.js.map
