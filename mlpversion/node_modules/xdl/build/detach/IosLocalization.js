'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.writeLocalizationResourcesAsync = undefined;

let writeLocalizationResourcesAsync = exports.writeLocalizationResourcesAsync = (() => {
  var _ref = _asyncToGenerator(function* ({ supportingDirectory, context }) {
    let locales = {};
    if (context.type === 'user') {
      locales = yield (0, (_ExponentTools || _load_ExponentTools()).getResolvedLocalesAsync)(context.config);
    } else if (context.type === 'service') {
      locales = context.config.locales !== undefined ? context.config.locales : {};
    }
    for (const [lang, localizationObj] of Object.entries(locales)) {
      const dir = _path.default.join(supportingDirectory, `${lang}.lproj`);
      (_mkdirp || _load_mkdirp()).default.sync(dir);
      const strings = _path.default.join(dir, 'InfoPlist.strings');
      const buffer = [];
      for (const [plistKey, localVersion] of Object.entries(localizationObj)) {
        buffer.push(`${plistKey} = "${localVersion}";`);
      }
      yield (_fsExtra || _load_fsExtra()).default.writeFile(strings, buffer.join('\n'));
    }
  });

  return function writeLocalizationResourcesAsync(_x) {
    return _ref.apply(this, arguments);
  };
})();

var _fsExtra;

function _load_fsExtra() {
  return _fsExtra = _interopRequireDefault(require('fs-extra'));
}

var _path = _interopRequireDefault(require('path'));

var _mkdirp;

function _load_mkdirp() {
  return _mkdirp = _interopRequireDefault(require('mkdirp'));
}

var _ExponentTools;

function _load_ExponentTools() {
  return _ExponentTools = require('./ExponentTools');
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
//# sourceMappingURL=../__sourcemaps__/detach/IosLocalization.js.map
