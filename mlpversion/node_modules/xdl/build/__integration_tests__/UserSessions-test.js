'use strict';

var _fsExtra;

function _load_fsExtra() {
  return _fsExtra = _interopRequireDefault(require('fs-extra'));
}

var _path = _interopRequireDefault(require('path'));

var _hashids;

function _load_hashids() {
  return _hashids = _interopRequireDefault(require('hashids'));
}

var _uuid;

function _load_uuid() {
  return _uuid = _interopRequireDefault(require('uuid'));
}

var _ApiV;

function _load_ApiV() {
  return _ApiV = _interopRequireDefault(require('../ApiV2'));
}

var _Api;

function _load_Api() {
  return _Api = _interopRequireDefault(require('../Api'));
}

var _User;

function _load_User() {
  return _User = require('../User');
}

var _UserSettings;

function _load_UserSettings() {
  return _UserSettings = _interopRequireDefault(require('../UserSettings'));
}

var _FormData;

function _load_FormData() {
  return _FormData = _interopRequireDefault(require('../tools/FormData'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const XDL_TEST_CLIENT_ID = 'o0YygTgKhOTdoWj10Yl9nY2P0SMTw38Y';

const _makeShortId = (salt, minLength = 10) => {
  const hashIds = new (_hashids || _load_hashids()).default(salt, minLength);
  return hashIds.encode(Date.now());
};

describe('User Sessions', () => {
  let userForTest;
  let userForTestPassword;

  beforeAll(_asyncToGenerator(function* () {
    process.env.__UNSAFE_EXPO_HOME_DIRECTORY = _path.default.join('/', 'tmp', `.expo-${_makeShortId((_uuid || _load_uuid()).default.v1())}`);

    const UserManager = _newTestUserManager();

    const username = `xdl-test-${_makeShortId((_uuid || _load_uuid()).default.v1())}`;
    const password = (_uuid || _load_uuid()).default.v1();

    // Register a new user that we can use for this test run
    const newUser = yield UserManager.registerAsync({
      username,
      password,
      email: `adam+${username}@getexponent.com`,
      givenName: 'XDL',
      familyName: 'Test User'
    });

    userForTest = newUser;
    userForTestPassword = password; // save password so we can use it to login

    yield UserManager.logoutAsync(); // log us out so we're in a clean state for these tests
  }));

  afterAll(_asyncToGenerator(function* () {
    if (process.env.__UNSAFE_EXPO_HOME_DIRECTORY) {
      (_fsExtra || _load_fsExtra()).default.removeSync(process.env.__UNSAFE_EXPO_HOME_DIRECTORY);
    }

    const api = (_ApiV || _load_ApiV()).default.clientForUser(userForTest);
    try {
      yield api.postAsync('auth/deleteUser');
    } catch (e) {
      console.error(e);
    }
  }));

  it('should login successfully, and persist a session token upon login', _asyncToGenerator(function* () {
    const UserManager = _newTestUserManager();
    yield UserManager.loginAsync('user-pass', {
      username: userForTest.username,
      password: userForTestPassword,
      testSession: true
    });

    const user = yield UserManager.getCurrentUserAsync();
    expect(user).not.toBeNull();
    if (!user) {
      return;
    }
    // expect auth0 tokens and session to be cached
    expect(user.username).toBe(userForTest.username);
    expect(user.idToken).not.toBeFalsy();
    expect(user.sessionSecret).toEqual('TEST');

    // expect auth0 tokens and session to be in state.json
    let { idToken, sessionSecret } = yield (_UserSettings || _load_UserSettings()).default.getAsync('auth', {});

    expect(idToken).not.toBeFalsy();
    expect(sessionSecret).toEqual('TEST');
  }));
  it('should remove a session token upon logout', _asyncToGenerator(function* () {
    const UserManager = _newTestUserManager();
    yield UserManager.loginAsync('user-pass', {
      username: userForTest.username,
      password: userForTestPassword,
      testSession: true
    });

    yield UserManager.logoutAsync();

    // expect auth0 tokens and sesion to be removed
    let { idToken, sessionSecret } = yield (_UserSettings || _load_UserSettings()).default.getAsync('auth', {});

    expect(idToken).toBe(undefined);
    expect(sessionSecret).toBe(undefined);
  }));

  it('should use the token in apiv1', _asyncToGenerator(function* () {
    const UserManager = _newTestUserManager();
    yield UserManager.loginAsync('user-pass', {
      username: userForTest.username,
      password: userForTestPassword,
      testSession: true
    });

    let formData = new (_FormData || _load_FormData()).default();
    formData.append('queryType', 'history');
    formData.append('slug', 'foobar');

    let response = yield (_Api || _load_Api()).default.callMethodAsync('publishInfo', [], 'post', null, {
      formData
    }, true);
    const sessionHeaderReceived = response.headers['expo-session-response'];
    expect(sessionHeaderReceived).toEqual('received');
  }));

  it('should use the token in apiv2', _asyncToGenerator(function* () {
    const UserManager = _newTestUserManager();
    yield UserManager.loginAsync('user-pass', {
      username: userForTest.username,
      password: userForTestPassword,
      testSession: true
    });

    const user = yield UserManager.getCurrentUserAsync();
    const api = (_ApiV || _load_ApiV()).default.clientForUser(user);
    const response = yield api.getAsync('auth/intercomUserHash', {}, {}, true);
    const sessionHeaderReceived = response.headers['expo-session-response'];
    expect(sessionHeaderReceived).toEqual('received');
  }));

  it('migration endpoint should be contacted if there is no session', _asyncToGenerator(function* () {
    const UserManager = _newTestUserManager();
    yield UserManager.loginAsync('user-pass', {
      username: userForTest.username,
      password: userForTestPassword
    });
    let user = yield UserManager.getCurrentUserAsync();

    // expect session to NOT be present
    expect(user.sessionSecret).toBe(undefined);
    let { sessionSecretOld } = yield (_UserSettings || _load_UserSettings()).default.getAsync('auth', {});
    expect(sessionSecretOld).toBe(undefined);

    // migrate to sessions
    yield UserManager.migrateAuth0ToSessionAsync({ testMode: true });

    // expect session to be cached and stored in state.json
    expect(user.sessionSecret).toEqual('TEST');
    let { sessionSecret } = yield (_UserSettings || _load_UserSettings()).default.getAsync('auth', {});
    expect(sessionSecret).toEqual('TEST');
  }));
});

function _newTestUserManager() {
  const UserManager = new (_User || _load_User()).UserManagerInstance();
  UserManager.initialize(XDL_TEST_CLIENT_ID); // XDL Test Client
  return UserManager;
}
//# sourceMappingURL=../__sourcemaps__/__integration_tests__/UserSessions-test.js.map
