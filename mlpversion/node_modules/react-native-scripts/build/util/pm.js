'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasYarn = hasYarn;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * check if the current path uses yarn, i.e. looking for yarn.lock in
 * the current path and up
 *  
 * @param {*} startingPath a path where we will look for yarn.lock file. 
 * Will traverse up the filesystem until we either find the file or reach the root
 * 
 * @param {boolean} useCached if true and we have a cached hasYarn result, it will be returned, otherwise go through the
 * normal lookup logic described above. mainly for optimization purpose, default is true.
 */
var _hasYarn = void 0;
function hasYarn(startingPath) {
  var useCached = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (_hasYarn != null && useCached) {
    return _hasYarn;
  }

  _hasYarn = false;
  var p = _path2.default.normalize(startingPath);
  while (p.length > 0) {
    var yarnLock = _path2.default.resolve(p, 'yarn.lock');
    try {
      var file = _path2.default.join(p, 'yarn.lock');
      _fs2.default.accessSync(file);
      _hasYarn = true;
      break;
    } catch (e) {
      var parsed = _path2.default.parse(p);
      if (parsed.root === parsed.dir) {
        break;
      }
      p = parsed.dir;
    }
  }
  return _hasYarn;
}
//# sourceMappingURL=pm.js.map