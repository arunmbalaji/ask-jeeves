'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

// print a nicely formatted message with setup information
var printServerInfo = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    var settings, address, emulatorHelp;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _xdl.ProjectSettings.readPackagerInfoAsync(process.cwd());

          case 2:
            settings = _context.sent;
            _context.next = 5;
            return _xdl.UrlUtils.constructManifestUrlAsync(process.cwd());

          case 5:
            address = _context.sent;
            emulatorHelp = void 0;

            if (process.platform === 'darwin') {
              emulatorHelp = 'Press ' + _chalk2.default.bold('a') + ' (Android) or ' + _chalk2.default.bold('i') + ' (iOS) to start an emulator.';
            } else {
              emulatorHelp = 'Press ' + _chalk2.default.bold('a') + ' to start an Android emulator.';
            }
            _qrcodeTerminal2.default.generate(address, function (qrCode) {
              (0, _log2.default)('\n' + (0, _indentString2.default)(qrCode, 2) + '\n\nYour app is now running at URL: ' + _chalk2.default.underline(_chalk2.default.cyan(address)) + '\n\n' + _chalk2.default.bold('View your app with live reloading:') + '\n\n  ' + _chalk2.default.underline('Android device:') + '\n    -> Point the Expo app to the QR code above.\n       (You\'ll find the QR scanner on the Projects tab of the app.)\n  ' + _chalk2.default.underline('iOS device:') + '\n    -> Press ' + _chalk2.default.bold('s') + ' to email/text the app URL to your phone.\n  ' + _chalk2.default.underline('Emulator:') + '\n    -> ' + emulatorHelp + '\n\nYour phone will need to be on the same local network as this computer.\nFor links to install the Expo app, please visit ' + _chalk2.default.underline(_chalk2.default.cyan('https://expo.io')) + '.\n\nLogs from serving your app will appear here. Press Ctrl+C at any time to stop.');
              printUsage();
            });

          case 9:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function printServerInfo() {
    return _ref.apply(this, arguments);
  };
}();

var handleKeypress = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(key) {
    var _this = this;

    var _ref3, success, error, localAddress, _ref4, _success, msg, lanAddress, defaultRecipient, rl, _handleKeypress, _cleanup, _cancel, reset;

    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.t0 = key;
            _context3.next = _context3.t0 === CTRL_C ? 3 : _context3.t0 === CTRL_D ? 3 : _context3.t0 === 'a' ? 5 : _context3.t0 === 'i' ? 15 : _context3.t0 === 's' ? 28 : _context3.t0 === 'q' ? 44 : _context3.t0 === 'r' ? 48 : _context3.t0 === 'R' ? 48 : _context3.t0 === 'd' ? 54 : 61;
            break;

          case 3:
            process.emit('SIGINT');
            return _context3.abrupt('return');

          case 5:
            (0, _clearConsole2.default)();
            _log2.default.withTimestamp('Starting Android...');
            _context3.next = 9;
            return _xdl.Android.openProjectAsync(process.cwd());

          case 9:
            _ref3 = _context3.sent;
            success = _ref3.success;
            error = _ref3.error;

            if (!success) {
              (0, _log2.default)(_chalk2.default.red(error.message));
            }
            printUsage();
            return _context3.abrupt('return');

          case 15:
            (0, _clearConsole2.default)();
            _log2.default.withTimestamp('Starting iOS...');
            _context3.next = 19;
            return _xdl.UrlUtils.constructManifestUrlAsync(process.cwd(), {
              hostType: 'localhost'
            });

          case 19:
            localAddress = _context3.sent;
            _context3.next = 22;
            return _xdl.Simulator.openUrlInSimulatorSafeAsync(localAddress);

          case 22:
            _ref4 = _context3.sent;
            _success = _ref4.success;
            msg = _ref4.msg;

            if (!_success) {
              (0, _log2.default)(_chalk2.default.red(msg));
            }
            printUsage();
            return _context3.abrupt('return');

          case 28:
            stopWaitingForCommand();
            _context3.next = 31;
            return _xdl.UrlUtils.constructManifestUrlAsync(process.cwd(), {
              hostType: 'lan'
            });

          case 31:
            lanAddress = _context3.sent;
            _context3.next = 34;
            return _xdl.UserSettings.getAsync('sendTo', null);

          case 34:
            defaultRecipient = _context3.sent;
            rl = _readline2.default.createInterface({
              input: process.stdin,
              output: process.stdout
            });

            _handleKeypress = function _handleKeypress(chr, key) {
              if (key && key.name === 'escape') {
                _cleanup();
                _cancel();
              }
            };

            _cleanup = function _cleanup() {
              rl.close();
              process.stdin.removeListener('keypress', _handleKeypress);
              startWaitingForCommand();
            };

            _cancel = function _cancel() {
              (0, _clearConsole2.default)();
              printUsage();
            };

            (0, _clearConsole2.default)();
            process.stdin.addListener('keypress', _handleKeypress);
            (0, _log2.default)('Please enter your phone number or email address (press ESC to cancel) ');
            rl.question(defaultRecipient ? '[default: ' + defaultRecipient + ']> ' : '> ', function () {
              var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(sendTo) {
                var sent;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _cleanup();
                        if (!sendTo && defaultRecipient) {
                          sendTo = defaultRecipient;
                        }
                        sendTo = sendTo && sendTo.trim();

                        if (sendTo) {
                          _context2.next = 6;
                          break;
                        }

                        _cancel();
                        return _context2.abrupt('return');

                      case 6:
                        _log2.default.withTimestamp('Sending ' + lanAddress + ' to ' + sendTo + '...');

                        sent = false;
                        _context2.prev = 8;
                        _context2.next = 11;
                        return _xdl.Exp.sendAsync(sendTo, lanAddress, true);

                      case 11:
                        _log2.default.withTimestamp('Sent link successfully.');
                        sent = true;
                        _context2.next = 18;
                        break;

                      case 15:
                        _context2.prev = 15;
                        _context2.t0 = _context2['catch'](8);

                        _log2.default.withTimestamp('Could not send link. ' + _context2.t0);

                      case 18:
                        printUsage();

                        if (!sent) {
                          _context2.next = 22;
                          break;
                        }

                        _context2.next = 22;
                        return _xdl.UserSettings.setAsync('sendTo', sendTo);

                      case 22:
                      case 'end':
                        return _context2.stop();
                    }
                  }
                }, _callee2, _this, [[8, 15]]);
              }));

              return function (_x2) {
                return _ref5.apply(this, arguments);
              };
            }());
            return _context3.abrupt('return');

          case 44:
            (0, _clearConsole2.default)();
            _context3.next = 47;
            return printServerInfo();

          case 47:
            return _context3.abrupt('return');

          case 48:
            (0, _clearConsole2.default)();
            reset = key === 'R';

            if (reset) {
              _log2.default.withTimestamp('Asking packager to reset its cache...');
            }
            _log2.default.withTimestamp('Restarting packager...');
            _xdl.Project.startAsync(process.cwd(), { reset: reset });
            return _context3.abrupt('return');

          case 54:
            (0, _clearConsole2.default)();
            dev = !dev;
            _context3.next = 58;
            return _xdl.ProjectSettings.setAsync(process.cwd(), { dev: dev });

          case 58:
            (0, _log2.default)('Packager now running in ' + _chalk2.default.bold(dev ? 'development' : 'production') + _chalk2.default.reset(' mode.') + '\n\nPlease close and reopen the project in the Expo app for the\nchange to take effect.');
            printUsage();
            return _context3.abrupt('return');

          case 61:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function handleKeypress(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var _xdl = require('xdl');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _indentString = require('indent-string');

var _indentString2 = _interopRequireDefault(_indentString);

var _qrcodeTerminal = require('qrcode-terminal');

var _qrcodeTerminal2 = _interopRequireDefault(_qrcodeTerminal);

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _readline = require('readline');

var _readline2 = _interopRequireDefault(_readline);

var _clearConsole = require('../util/clearConsole');

var _clearConsole2 = _interopRequireDefault(_clearConsole);

var _log = require('../util/log');

var _log2 = _interopRequireDefault(_log);

var _packager = require('../util/packager');

var _packager2 = _interopRequireDefault(_packager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_xdl.Config.validation.reactNativeVersionWarnings = false;
_xdl.Config.developerTool = 'crna';
_xdl.Config.offline = true;

var args = (0, _minimist2.default)(process.argv.slice(2), {
  boolean: ['reset-cache', 'interactive'],
  default: { interactive: true }
});
var dev = true;

var options = {};
if (args['reset-cache']) {
  options.reset = true;
  (0, _log2.default)('Asking packager to reset its cache...');
}

var _process = process,
    stdin = _process.stdin;

var startWaitingForCommand = function startWaitingForCommand() {
  stdin.setRawMode(true);
  stdin.resume();
  stdin.setEncoding('utf8');
  stdin.on('data', handleKeypress);
};

var stopWaitingForCommand = function stopWaitingForCommand() {
  stdin.removeListener('data', handleKeypress);
  stdin.setRawMode(false);
  stdin.resume();
};

var isInteractive = false;
if (args.interactive && typeof stdin.setRawMode === 'function') {
  startWaitingForCommand();
  isInteractive = true;
}

_packager2.default.run(onReady, options, isInteractive);

function onReady() {
  (0, _log2.default)(_chalk2.default.green('Packager started!\n'));
  printServerInfo();
}

function printUsage() {
  if (!isInteractive) {
    return;
  }
  var dim = _chalk2.default.dim,
      bold = _chalk2.default.bold;

  var devMode = dev ? 'development' : 'production';
  var iosInfo = process.platform === 'darwin' ? dim(', or') + ' i ' + dim('to open iOS emulator.') : dim('.');
  (0, _log2.default)('\n ' + dim('\u203A Press') + ' a ' + dim('to open Android device or emulator') + iosInfo + '\n ' + dim('\u203A Press') + ' s ' + dim('to send the app URL to your phone number or email address') + '\n ' + dim('\u203A Press') + ' q ' + dim('to display QR code.') + '\n ' + dim('\u203A Press') + ' r ' + dim('to restart packager, or') + ' R ' + dim('to restart packager and clear cache.') + '\n ' + dim('\u203A Press') + ' d ' + dim('to toggle development mode. (current mode: ' + bold(devMode) + _chalk2.default.reset.dim(')')) + '\n');
}

var CTRL_C = '\x03';
var CTRL_D = '\x04';
//# sourceMappingURL=start.js.map